---
#reserve-token !The token that is considered the reserve which defines trade sizings and that TKN trends against.
#reserve-decimals !The decimals of the reserve token.

#times !The expression to get the last time and now as unix timestamps in seconds.
#real-times
  last-time:
    get(order-hash()),
  now:
    block-timestamp(),
  :set(order-hash() now);

#test-last-time !The last time a trade cleared as unix timestamp in seconds.
#test-now !The current time as unix timestamp in seconds.
#test-times
  _ _: test-last-time test-now;

#jittery-binomial-bits !The number of bits to use for the binomial distribution.
#jittery-binomial
  seed:,
  binomial18-10:
    int-to-decimal18(bitwise-count-ones(bitwise-decode<0 jittery-binomial-bits>(hash(seed)))),
  noise18-1:
    int-mod(hash(seed 0) 1e18),
  jittery-combined:
    decimal18-add(binomial18-10 noise18-1),
  jittery-combined-normalized:
    decimal18-div(jittery-combined decimal18-add(1e18 int-to-decimal18(jittery-binomial-bits)));

#mean-cooldown !The mean cooldown time in seconds.
#ensure-cooldown
  last-time
  now:,
  /* hash the last-time here to make sure the seed wont collide with the seed in target-reserve */
  random-multiplier18: call<'jittery-binomial>(hash(last-time)),
  cooldown18: decimal18-mul(
    decimal18-mul(int-to-decimal18(mean-cooldown) 2e18)
    random-multiplier18
  ),
  cooldown: decimal18-scale-n<0>(cooldown18),
  :ensure(less-than(int-add(last-time cooldown) now) "Trade cooldown.");

#trend-ratio-exp !Expression to get the trend ratio as 18 decimal fixed point.

#twap-trend-ratio-long-time !The long time period for the twap based trend detection as seconds.
#twap-trend-ratio-short-time !The short time period for the twap based trend detection as seconds.
#twap-trend-ratio-fee !The pool fee to use for the twap based trend detection.
#uni-v3-twap-trend-ratio
  numerator: uniswap-v3-twap-output-ratio(
    input-token() input-token-decimals()
    output-token() output-token-decimals()
    twap-trend-ratio-short-time 0
    twap-trend-ratio-fee
  ),
  denominator: uniswap-v3-twap-output-ratio(
    input-token() input-token-decimals()
    output-token() output-token-decimals()
    twap-trend-ratio-long-time 0
    twap-trend-ratio-fee
  ),
  trend-ratio: decimal18-div(numerator denominator);

#mean-reserve-amount18 !The mean amount of reserve to offer per trade as normalized 18 decimals.
#trend-up-factor !The factor to multiply the trend with when the trend is up as normalized 18 decimals.
#trend-down-factor !The factor to multiply the trend with when the trend is down as normalized 18 decimals.
#calculate-reserve-amount18
  last-time now: call<times>,
  :call<'ensure-cooldown>(last-time now),
  random-multiplier18: call<'jittery-binomial>(last-time),
  jittered-reserve-amount18: decimal18-mul(
    decimal18-mul(mean-reserve-amount18 2e18)
    random-multiplier18
  ),
  trend-ratio: call<'trend-ratio-exp>(),
  skewed-trend-ratio: if(
    greater-than(trend-ratio 1e18)
    decimal18-power(trend-ratio trend-up-factor)
    decimal18-power(trend-ratio trend-down-factor)
  ),
  reserve-amount18: decimal18-mul(jittered-reserve-amount18 skewed-trend-ratio);

#calculate-tkn-amount18
  reserve-amount18:,
  now: call<times>(),
  tkn-amount18 last-price-timestamp: uniswap-v2-quote-exact-input<1>(
    output-token() input-token() decimal18-scale-n<reserve-decimals>(reserve-amount18)
  ),
  :ensure(less-than(last-price-timestamp now) "Price change in same block."),
  _: tkn-amount18;

#bounty !The bounty to offer for the trade as normalized 18 decimal reserve amount.

#calculate-io
  reserve-amount18: call<'calculate-reserve-amount18>(),
  tkn-amount18: call<'calculate-tkn-amount18>(reserve-amount18),
  is-buying-tkn: equal-to(output-token() reserve-token),
  amount: if(
    is-buying-tkn
    decimal18-add(reserve-amount18 bounty)
    tkn-amount18),
  io-ratio: if(
    is-buying-tkn
    decimal18-div(tkn-amount18 amount)
    decimal18-div(decimal18-sub(reserve-amount18 bounty) amount));

#handle-io
  :ensure(
    greater-than-or-equal-to(
      output-vault-balance-decrease()
      decimal18-scale-n-dynamic(output-token-decimals() calculated-max-output())
    )
    "Partial trade."
  );