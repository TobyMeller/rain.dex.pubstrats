# The canary order does nothing except run on a cooldown.
#
# It is useful only to show that orders clear on some network. If the canary is
# deployed and does not run, it means that there are no solvers monitoring the
# network, or at least not the raindex contract that the canary is deployed on.
#
# The canary is basically a stripped back version of the sampler. It runs but
# doesn't sample anything.

tokens:
  eusdt:
    network: flare
    address: 0x96B41289D90444B8adD57e6F265DB5aE8651DF29
    decimals: 6
  wflr:
    network: flare
    address: 0x1D80c49BbBCd1C0911346656B529DF9E5c2F783d
    decimals: 18

orders:
  flare:
    orderbook: flare
    inputs:
      # Input is irrelevant because we always set the IO ratio to 0.
      - token: eusdt
    outputs:
      - token: wflr

scenarios:
  flare:
    runs: 1
    deployer: flare
    orderbook: flare
    bindings:
      raindex-subparser: 0x57c613381deadaE520eC33556C1d51c9Dcb0adb3
      # at time of writing a transaction on flare is about 0.027 FLR
      bounty: 0.03
      cooldown: 600

charts:
  flare:

deployments:
  flare:
    order: flare
    scenario: flare

---
#raindex-subparser !The subparser for Raindex.

#cooldown !Time between canary runs.

#bounty !Amount of FLR to pay for a successful canary.

#calculate-io
using-words-from raindex-subparser

:ensure(
  greater-than(
    block-timestamp()
    add(get(order-hash()) cooldown))
  "Cooldown"
),
:set(order-hash() block-timestamp()),

_ _: bounty 0;

#handle-io
:;