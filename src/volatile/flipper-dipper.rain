tokens:
  eusdt:
    network: flare
    address: 0x96B41289D90444B8adD57e6F265DB5aE8651DF29
    decimals: 6
  wflr:
    network: flare
    address: 0x1D80c49BbBCd1C0911346656B529DF9E5c2F783d
    decimals: 18

orders:
  flare:
    orderbook: flare
    # vault-id is generated on cli `openssl rand -hex 32`
    inputs:
      - token: wflr
        vault-id: 0x3128360892b5b5a89ad57a80e0653eb563c334c5a475217813f7782a53bd3823
      - token: eusdt
        vault-id: 0x3128360892b5b5a89ad57a80e0653eb563c334c5a475217813f7782a53bd3823
    outputs:
      - token: wflr
        vault-id: 0x3128360892b5b5a89ad57a80e0653eb563c334c5a475217813f7782a53bd3823
      - token: eusdt
        vault-id: 0x3128360892b5b5a89ad57a80e0653eb563c334c5a475217813f7782a53bd3823

scenarios:
  flare:
    orderbook: flare
    runs: 1
    bindings:
      raindex-subparser: 0xF836f2746B407136a5bCB515495949B1edB75184
      flare-subparser: 0xe4064e894DB4bfB9F3A64882aECB2715DC34FaF4
      fallback-ratio: '''fallback-ftso-usd'
      fallback-ftso-multiplier: 1e18
    scenarios:
      constant:
        bindings:
          ratio-multiplier: '''constant-ratio-multiplier'
          constant-ratio-multiplier-val18: 1e15
      linear-decay:
        bindings:
          ratio-multiplier: '''linear-decay-multiplier'
          linear-decay-start18: 101e16
          seconds-per-epoch18: 3600e18
          linear-decay-floor18: 0
      ramp-down:
        bindings:
          # https://www.desmos.com/calculator/u40dpvk0jf
          ratio-multiplier: '''ramp-down'
          ramp-down-c18: 101e16
          ramp-down-d18: 6e18
          seconds-per-epoch18: 86400e18

charts:
  flare:

deployments:
  flare-constant:
    order: flare
    scenario: flare.constant

  flare-linear-decay:
    order: flare
    scenario: flare.linear-decay

  flare-ramp-down:
    order: flare
    scenario: flare.ramp-down

---

#seconds-per-epoch18 !Number of seconds to treat as 1 epoch. E.g. 86400e18 is 1 day per epoch.
#linear-decay-time-key "linear-decay-last-time"
#epochs-since-last-trade
input-time-key: hash(order-hash() input-token() linear-decay-time-key),
output-time-key: hash(order-hash() output-token() linear-decay-time-key),
/* the input time key in this trade will be the output time key for the next trade */
:set(input-time-key block-timestamp()),
output-last-time: any(get(output-time-key) block-timestamp()),
duration-seconds: int-sub(block-timestamp() output-last-time),
duration-seconds18: int-to-decimal18(duration-seconds),
epochs18: decimal18-div(duration-seconds18 seconds-per-epoch18);


/* y = C - e^(x - D) */
#ramp-down-c18 !C in ramp down equation.
#ramp-down-d18 !D in ramp down equation.
#ramp-down
x18: call<'epochs-since-last-trade>(),
exponent18: decimal18-sub(x18 ramp-down-d18),
e: 2718281828459045235,
ramp18: decimal18-power(e exponent18),
y18: decimal18-sub(ramp-down-c18 ramp18);

#linear-decay-start18 !Starting position for the linear decay.
#linear-decay-rate18 !Linear decay decrease per unit time (seconds).
#linear-decay-floor18 !Minimum value the multiplier will decay to.
#linear-decay-multiplier
epochs18: call<'epochs-since-last-trade>(),
decay-amount18: decimal18-saturating-sub(linear-decay-start18 decimal18-mul(linear-decay-rate18 epochs18)),
_: decimal18-max(decay-amount18 linear-decay-floor18);

#constant-ratio-multiplier-val18 !Constant value to multiply the breakeven ratio by.
#constant-ratio-multiplier
_: constant-ratio-multiplier-val18;

#breakeven-io-ratio
prev-input-vault-balance: get(
  hash(
    order-hash()
    input-token()
  )
),
prev-input-vault-balance18: decimal18-scale-18-dynamic(
  input-token-decimals()
  prev-input-vault-balance
),
output-vault-balance18: decimal18-scale-18-dynamic(
  output-token-decimals()
  output-vault-balance-before()
),
_: decimal18-div(
  prev-input-vault-balance18
  output-vault-balance18
);

#ratio-multiplier !Expression for the multiplier to the breakeven ratio.
#desired-ratio
_: decimal18-mul(
  call<'breakeven-io-ratio>()
  call<ratio-multiplier>()
);

#fallback-ftso-multiplier !The multiplier to apply to the FTSO to incentivise the initial clear.
#fallback-ftso-usd
_: decimal18-mul(
  ftso-current-price-usd("FLR" 3600)
  fallback-ftso-multiplier
);

#fallback-constant-value !A constant fallback value.
#fallback-constant
_: fallback-constant-value;

#fallback-ratio !Expression for the ratio to use when there is no history for the pair.
#calculate-io
using-words-from raindex-subparser flare-subparser
amount: decimal18-scale-18-dynamic(
  output-token-decimals()
  output-vault-balance-before()
),
io-ratio: any(
  call<'desired-ratio>()
  call<fallback-ratio>()
);

#handle-io
/* avoid noops corrupting state */
:ensure(
  output-vault-balance-before()
  "Output noop."
),
/* avoid partial vault clears as it would break our ratio logic */
:ensure(
  equal-to(
    output-vault-balance-before()
    output-vault-balance-decrease()
  )
  "Partial clear."
),
/* record the output so that it can be the input on the return trip */
:set(
  hash(
    order-hash()
    output-token()
  )
  output-vault-balance-before()
);