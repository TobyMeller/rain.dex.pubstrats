networks:
  polygon-quickswap: 
    rpc: https://polygon.drpc.org  
    chain-id: 137 
    network-id: 137 
    currency: MATIC

subgraphs:
  polygon-quickswap: https://api.thegraph.com/subgraphs/name/h20liquidity/polygon-0xc95a5f8e
  
orderbooks:
  polygon-quickswap:
    address: 0xc95A5f8eFe14d7a20BD2E5BAFEC4E71f8Ce0B9A6
    network: polygon-quickswap
    subgraph: polygon-quickswap

deployers:
  polygon-quickswap:
    address: 0xF77b3c3f61af5a3cE7f7CE3cfFc117491104432E
    network: polygon-quickswap

tokens:
  polygon-sfl:
    network: polygon-quickswap
    address: 0xD1f9c58e33933a993A3891F8acFe05a68E1afC05
  polygon-moon:
    network: polygon-quickswap
    address: 0x7AEfff599570dEC2F3DbBc2ACe3cb1F8206749eB
  polygon-rond:
    network: polygon-quickswap
    address: 0x204820B6e6FEae805e376D2C6837446186e57981
  polygon-sand:
    network: polygon-quickswap
    address: 0xBbba073C31bF03b8ACf7c28EF0738DeCF3695683
  polygon-quick:
    network: polygon-quickswap
    address: 0x831753DD7087CaC61aB5644b308642cc1c33Dc13
  polygon-ixt:
    network: polygon-quickswap
    address: 0xE06Bd4F5aAc8D0aA337D13eC88dB6defC6eAEefE
  polygon-usdt:
    network: polygon-quickswap
    address: 0xc2132D05D31c914a87C6611C10748AEb04B58e8F

orders:
  # vault-id generated with `openssl rand -hex 32`

  # SFL-USDT orders
  polygon-sfl-buy:
    orderbook: polygon-quickswap
    inputs:
      - token: polygon-sfl
        vault-id: 0xccbd519d0dfae5cec431b82b0986636764d775be4b61bab8c4a527af36f499ff
    outputs:
      - token: polygon-usdt
        vault-id: 0xccbd519d0dfae5cec431b82b0986636764d775be4b61bab8c4a527af36f499ff

  polygon-sfl-sell:
    orderbook: polygon-quickswap
    inputs:
      - token: polygon-usdt
        vault-id: 0xccbd519d0dfae5cec431b82b0986636764d775be4b61bab8c4a527af36f499ff
    outputs:
      - token: polygon-sfl
        vault-id: 0xccbd519d0dfae5cec431b82b0986636764d775be4b61bab8c4a527af36f499ff

  # MOON-USDT orders
  polygon-moon-buy:
    orderbook: polygon-quickswap
    inputs:
      - token: polygon-moon
        vault-id: 0x06a6e9ba5540e57f30de1b70fcedbe5971cd345743fb74044d966798b509c97d
    outputs:
      - token: polygon-usdt
        vault-id: 0x06a6e9ba5540e57f30de1b70fcedbe5971cd345743fb74044d966798b509c97d

  polygon-moon-sell:
    orderbook: polygon-quickswap
    inputs:
      - token: polygon-usdt
        vault-id: 0x06a6e9ba5540e57f30de1b70fcedbe5971cd345743fb74044d966798b509c97d
    outputs:
      - token: polygon-moon
        vault-id: 0x06a6e9ba5540e57f30de1b70fcedbe5971cd345743fb74044d966798b509c97d
  
  # ROND-USDT orders
  polygon-rond-buy:
    orderbook: polygon-quickswap
    inputs:
      - token: polygon-rond
        vault-id: 0x5ddef3abb26d0bc4c0e309ec8d22d4e2cf0b22350e74ba084514f646ff07b01f
    outputs:
      - token: polygon-usdt
        vault-id: 0x5ddef3abb26d0bc4c0e309ec8d22d4e2cf0b22350e74ba084514f646ff07b01f

  polygon-rond-sell:
    orderbook: polygon-quickswap
    inputs:
      - token: polygon-usdt
        vault-id: 0x5ddef3abb26d0bc4c0e309ec8d22d4e2cf0b22350e74ba084514f646ff07b01f
    outputs:
      - token: polygon-rond
        vault-id: 0x5ddef3abb26d0bc4c0e309ec8d22d4e2cf0b22350e74ba084514f646ff07b01f

  # SAND-USDT orders
  polygon-sand-buy:
    orderbook: polygon-quickswap
    inputs:
      - token: polygon-sand
        vault-id: 0xfe3fa54d325540a7ef29a0a6499b8f3f48a5c22caaf9fe84c0817a07006112d2
    outputs:
      - token: polygon-usdt
        vault-id: 0xfe3fa54d325540a7ef29a0a6499b8f3f48a5c22caaf9fe84c0817a07006112d2

  polygon-sand-sell:
    orderbook: polygon-quickswap
    inputs:
      - token: polygon-usdt
        vault-id: 0xfe3fa54d325540a7ef29a0a6499b8f3f48a5c22caaf9fe84c0817a07006112d2
    outputs:
      - token: polygon-sand
        vault-id: 0xfe3fa54d325540a7ef29a0a6499b8f3f48a5c22caaf9fe84c0817a07006112d2

  # IXT-USDT orders
  polygon-ixt-buy:
    orderbook: polygon-quickswap
    inputs:
      - token: polygon-ixt
        vault-id: 0x1703d50775df07536baf9fd1332ade9449a7de8ffc2edec70bb34a34ca89616e
    outputs:
      - token: polygon-usdt
        vault-id: 0x1703d50775df07536baf9fd1332ade9449a7de8ffc2edec70bb34a34ca89616e

  polygon-ixt-sell:
    orderbook: polygon-quickswap
    inputs:
      - token: polygon-usdt
        vault-id: 0x1703d50775df07536baf9fd1332ade9449a7de8ffc2edec70bb34a34ca89616e
    outputs:
      - token: polygon-ixt
        vault-id: 0x1703d50775df07536baf9fd1332ade9449a7de8ffc2edec70bb34a34ca89616e



  

scenarios:
    polygon-quickswap-tranches:
        network: polygon-quickswap
        deployer: polygon-quickswap
        orderbook: polygon-quickswap
        bindings:
          # Common bindings for all token pairs
          uniswap-words: 0xb1d6D10561D4e1792A7c6B336b0529e4bFb5Ea8F
          orderbook-subparser: 0x1fA67aEe8BB29B3144ebAAECe51Fce06BF903929
          tranche-space-per-second: 11574074074074
          tranche-space-recharge-delay: 300
          min-tranche-space-diff: 1e17
          tranche-space-snap-threshold: 1e16
          io-ratio-multiplier: '''io-ratio-multiplier-identity'

        scenarios:
          # SFL-USDT buy tranche order 
          sfl-buy:
            bindings:
              amount-is-output: 1
              io-ratio-expr: '''linear-growth'
              io-ratio-base: 10e18
              io-ratio-growth: 1e17
              tranche-size-expr: '''exponential-growth'
              tranche-size-base: 2e18
              tranche-size-growth: 1e16
            scenarios:
              initialized:
                bindings:
                  initial-tranche-space: 3e18
                scenarios:
                  prod:
                    bindings:
                      get-last-tranche: '''get-last-tranche-prod'
                      set-last-tranche: '''set-last-tranche-prod'
                      plottables: '''plottables-prod'
                      tranche-space-shyness: 0
                  test:
                    runs: 100
                    bindings:
                      get-last-tranche: '''get-last-tranche-test-init'
                      set-last-tranche: '''set-last-tranche-test'
                      plottables: '''plottables-test'
                      test-last-update-time: 0
                      test-now: 0
              test:
                  runs: 10000
                  bindings:
                    get-last-tranche: '''get-last-tranche-test'
                    set-last-tranche: '''set-last-tranche-test'
                    plottables: '''plottables-test'
                    max-test-tranche-space: 20e18
                    test-last-update-time: 0
                    test-now: 0

          # SFL-USDT sell tranche order 
          sfl-sell:
            bindings:
              amount-is-output: 0
              io-ratio-expr: '''linear-growth'
              io-ratio-base: 99e15
              io-ratio-growth: 1e16
              tranche-size-expr: '''exponential-growth'
              tranche-size-base: 2e18
              tranche-size-growth: 1e16
            scenarios:
              initialized:
                bindings:
                  initial-tranche-space: 0
                scenarios:
                  prod:
                    bindings:
                      get-last-tranche: '''get-last-tranche-prod'
                      set-last-tranche: '''set-last-tranche-prod'
                      plottables: '''plottables-prod'
                      tranche-space-shyness: 0
                  test:
                    runs: 100
                    bindings:
                      get-last-tranche: '''get-last-tranche-test-init'
                      set-last-tranche: '''set-last-tranche-test'
                      plottables: '''plottables-test'
                      test-last-update-time: 0
                      test-now: 0
              test:
                  runs: 10000
                  bindings:
                    get-last-tranche: '''get-last-tranche-test'
                    set-last-tranche: '''set-last-tranche-test'
                    plottables: '''plottables-test'
                    max-test-tranche-space: 20e18
                    test-last-update-time: 0
                    test-now: 0
          
          # MOON-USDT buy tranche order
          moon-buy:
            bindings:
              amount-is-output: 1
              io-ratio-expr: '''linear-growth'
              io-ratio-base: 1400e18
              io-ratio-growth: 15e18
              tranche-size-expr: '''exponential-growth'
              tranche-size-base: 2e18
              tranche-size-growth: 1e16
            scenarios:
              initialized:
                bindings:
                  initial-tranche-space: 11e18
                scenarios:
                  prod:
                    bindings:
                      get-last-tranche: '''get-last-tranche-prod'
                      set-last-tranche: '''set-last-tranche-prod'
                      plottables: '''plottables-prod'
                      tranche-space-shyness: 0
                  test:
                    runs: 100
                    bindings:
                      get-last-tranche: '''get-last-tranche-test-init'
                      set-last-tranche: '''set-last-tranche-test'
                      plottables: '''plottables-test'
                      test-last-update-time: 0
                      test-now: 0
              test:
                  runs: 10000
                  bindings:
                    get-last-tranche: '''get-last-tranche-test'
                    set-last-tranche: '''set-last-tranche-test'
                    plottables: '''plottables-test'
                    max-test-tranche-space: 20e18
                    test-last-update-time: 0
                    test-now: 0

          # MOON-USDT sell tranche order
          moon-sell:
            bindings:
              amount-is-output: 0
              io-ratio-expr: '''linear-growth'
              io-ratio-base: 68e13
              io-ratio-growth: 1e13
              tranche-size-expr: '''exponential-growth'
              tranche-size-base: 2e18
              tranche-size-growth: 1e16
            scenarios:
              initialized:
                bindings:
                  initial-tranche-space: 0
                scenarios:
                  prod:
                    bindings:
                      get-last-tranche: '''get-last-tranche-prod'
                      set-last-tranche: '''set-last-tranche-prod'
                      plottables: '''plottables-prod'
                      tranche-space-shyness: 0
                  test:
                    runs: 100
                    bindings:
                      get-last-tranche: '''get-last-tranche-test-init'
                      set-last-tranche: '''set-last-tranche-test'
                      plottables: '''plottables-test'
                      test-last-update-time: 0
                      test-now: 0
              test:
                  runs: 10000
                  bindings:
                    get-last-tranche: '''get-last-tranche-test'
                    set-last-tranche: '''set-last-tranche-test'
                    plottables: '''plottables-test'
                    max-test-tranche-space: 20e18
                    test-last-update-time: 0
                    test-now: 0

          # ROND-USDT buy tranche order
          rond-buy:
            bindings:
              amount-is-output: 1
              io-ratio-expr: '''linear-growth'
              io-ratio-base: 320e18
              io-ratio-growth: 2e18
              tranche-size-expr: '''exponential-growth'
              tranche-size-base: 2e18
              tranche-size-growth: 1e16
            scenarios:
              initialized:
                bindings:
                  initial-tranche-space: 5e18
                scenarios:
                  prod:
                    bindings:
                      get-last-tranche: '''get-last-tranche-prod'
                      set-last-tranche: '''set-last-tranche-prod'
                      plottables: '''plottables-prod'
                      tranche-space-shyness: 0
                  test:
                    runs: 100
                    bindings:
                      get-last-tranche: '''get-last-tranche-test-init'
                      set-last-tranche: '''set-last-tranche-test'
                      plottables: '''plottables-test'
                      test-last-update-time: 0
                      test-now: 0
              test:
                  runs: 10000
                  bindings:
                    get-last-tranche: '''get-last-tranche-test'
                    set-last-tranche: '''set-last-tranche-test'
                    plottables: '''plottables-test'
                    max-test-tranche-space: 20e18
                    test-last-update-time: 0
                    test-now: 0

          # ROND-USDT sell tranche order
          rond-sell:
            bindings:
              amount-is-output: 0
              io-ratio-expr: '''linear-growth'
              io-ratio-base: 31e14
              io-ratio-growth: 1e14
              tranche-size-expr: '''exponential-growth'
              tranche-size-base: 2e18
              tranche-size-growth: 1e16
            scenarios:
              initialized:
                bindings:
                  initial-tranche-space: 0
                scenarios:
                  prod:
                    bindings:
                      get-last-tranche: '''get-last-tranche-prod'
                      set-last-tranche: '''set-last-tranche-prod'
                      plottables: '''plottables-prod'
                      tranche-space-shyness: 0
                  test:
                    runs: 100
                    bindings:
                      get-last-tranche: '''get-last-tranche-test-init'
                      set-last-tranche: '''set-last-tranche-test'
                      plottables: '''plottables-test'
                      test-last-update-time: 0
                      test-now: 0
              test:
                  runs: 10000
                  bindings:
                    get-last-tranche: '''get-last-tranche-test'
                    set-last-tranche: '''set-last-tranche-test'
                    plottables: '''plottables-test'
                    max-test-tranche-space: 20e18
                    test-last-update-time: 0
                    test-now: 0

          # SAND-USDT buy tranche order
          sand-buy:
            bindings:
              amount-is-output: 1
              io-ratio-expr: '''linear-growth'
              io-ratio-base: 23e17
              io-ratio-growth: 5e16
              tranche-size-expr: '''exponential-growth'
              tranche-size-base: 2e18
              tranche-size-growth: 1e16
            scenarios:
              initialized:
                bindings:
                  initial-tranche-space: 2e18
                scenarios:
                  prod:
                    bindings:
                      get-last-tranche: '''get-last-tranche-prod'
                      set-last-tranche: '''set-last-tranche-prod'
                      plottables: '''plottables-prod'
                      tranche-space-shyness: 0
                  test:
                    runs: 100
                    bindings:
                      get-last-tranche: '''get-last-tranche-test-init'
                      set-last-tranche: '''set-last-tranche-test'
                      plottables: '''plottables-test'
                      test-last-update-time: 0
                      test-now: 0
              test:
                  runs: 10000
                  bindings:
                    get-last-tranche: '''get-last-tranche-test'
                    set-last-tranche: '''set-last-tranche-test'
                    plottables: '''plottables-test'
                    max-test-tranche-space: 20e18
                    test-last-update-time: 0
                    test-now: 0

          # SAND-USDT sell tranche order
          sand-sell:
            bindings:
              amount-is-output: 0
              io-ratio-expr: '''linear-growth'
              io-ratio-base: 43e16
              io-ratio-growth: 1e16
              tranche-size-expr: '''exponential-growth'
              tranche-size-base: 2e18
              tranche-size-growth: 1e16
            scenarios:
              initialized:
                bindings:
                  initial-tranche-space: 0
                scenarios:
                  prod:
                    bindings:
                      get-last-tranche: '''get-last-tranche-prod'
                      set-last-tranche: '''set-last-tranche-prod'
                      plottables: '''plottables-prod'
                      tranche-space-shyness: 0
                  test:
                    runs: 100
                    bindings:
                      get-last-tranche: '''get-last-tranche-test-init'
                      set-last-tranche: '''set-last-tranche-test'
                      plottables: '''plottables-test'
                      test-last-update-time: 0
                      test-now: 0
              test:
                  runs: 10000
                  bindings:
                    get-last-tranche: '''get-last-tranche-test'
                    set-last-tranche: '''set-last-tranche-test'
                    plottables: '''plottables-test'
                    max-test-tranche-space: 20e18
                    test-last-update-time: 0
                    test-now: 0

          # IXT-USDT buy tranche order
          ixt-buy:
            bindings:
              amount-is-output: 1
              io-ratio-expr: '''linear-growth'
              io-ratio-base: 10e18
              io-ratio-growth: 2e17
              tranche-size-expr: '''exponential-growth'
              tranche-size-base: 2e18
              tranche-size-growth: 1e16
            scenarios:
              initialized:
                bindings:
                  initial-tranche-space: 0
                scenarios:
                  prod:
                    bindings:
                      get-last-tranche: '''get-last-tranche-prod'
                      set-last-tranche: '''set-last-tranche-prod'
                      plottables: '''plottables-prod'
                      tranche-space-shyness: 0
                  test:
                    runs: 100
                    bindings:
                      get-last-tranche: '''get-last-tranche-test-init'
                      set-last-tranche: '''set-last-tranche-test'
                      plottables: '''plottables-test'
                      test-last-update-time: 0
                      test-now: 0
              test:
                  runs: 10000
                  bindings:
                    get-last-tranche: '''get-last-tranche-test'
                    set-last-tranche: '''set-last-tranche-test'
                    plottables: '''plottables-test'
                    max-test-tranche-space: 20e18
                    test-last-update-time: 0
                    test-now: 0

          # IXT-USDT sell tranche order
          ixt-sell:
            bindings:
              amount-is-output: 0
              io-ratio-expr: '''linear-growth'
              io-ratio-base: 12e16
              io-ratio-growth: 5e14
              tranche-size-expr: '''exponential-growth'
              tranche-size-base: 2e18
              tranche-size-growth: 1e16
            scenarios:
              initialized:
                bindings:
                  initial-tranche-space: 0
                scenarios:
                  prod:
                    bindings:
                      get-last-tranche: '''get-last-tranche-prod'
                      set-last-tranche: '''set-last-tranche-prod'
                      plottables: '''plottables-prod'
                      tranche-space-shyness: 0
                  test:
                    runs: 100
                    bindings:
                      get-last-tranche: '''get-last-tranche-test-init'
                      set-last-tranche: '''set-last-tranche-test'
                      plottables: '''plottables-test'
                      test-last-update-time: 0
                      test-now: 0
              test:
                  runs: 10000
                  bindings:
                    get-last-tranche: '''get-last-tranche-test'
                    set-last-tranche: '''set-last-tranche-test'
                    plottables: '''plottables-test'
                    max-test-tranche-space: 20e18
                    test-last-update-time: 0
                    test-now: 0




charts:
    # SFL metrics chart
    sfl-buy-initial-deployment:
      scenario: polygon-quickswap-tranches.sfl-buy.initialized.test
      metrics:
        - label: Amount of USDT required to buy SFL in the first tranche
          value: 0.6
          unit-prefix: $
        - label: Amount of SFL purchased in the first tranche
          value: 0.5.2
        - label: 'Initial io-ratio (i.e. # SFL purchased per USDT spent)'
          value: 0.7
        - label: Initial effective buy price (e.g. how much you pay for 1 SFL in USDT, visible on dextools)
          value: 0.5.3
          unit-prefix: $
        - label: Starting tranche
          value: 0.2.0
      plots:

    sfl-buy-simulation:
        scenario: polygon-quickswap-tranches.sfl-buy.test
        plots:
          'io-ratio (i.e. # of SFL purchased per USDT spent) vs tranche':
            marks:
              - type: line
                options:
                  x: 0.0
                  y: 0.7
          Effective buy price by tranche (e.g. how much you pay for 1 SFL token in USDT e.g. visible on dextools):
            marks:
              - type: line
                options:
                  x: 0.0
                  y: 0.5.3

    sfl-sell-initial-deployment:
      scenario: polygon-quickswap-tranches.sfl-sell.initialized.test
      metrics:
        - label: Amount of SFL sold to meet the first tranche of USDT
          value: 0.6
          unit-prefix: $
        - label: Amount of USDT received selling the first tranche of SFL tokens
          value: 0.5.2
        - label: 'Initial io-ratio (i.e. # of USDT purchased per SFL spent)'
          value: 0.7
        - label: Initial effective sell price (Amount of SFL to sell 1 USDT e.g. visible on dextools)
          value: 0.7
          unit-prefix: $
        - label: Starting tranche
          value: 0.2.0
      plots:
                  
    sfl-sell-simulation:
        scenario: polygon-quickswap-tranches.sfl-sell.test
        plots:
          'io-ratio (i.e. # of TKN purchased per $ spent) vs tranche':
            marks:
              - type: line
                options:
                  x: 0.0
                  y: 0.7
          'Effective price (e.g. visible on dextools) vs tranche':
            marks:
              - type: line
                options:
                  x: 0.0
                  y: 0.7

    # MOON metrics chart
    moon-buy-initial-deployment:
      scenario: polygon-quickswap-tranches.moon-buy.initialized.test
      metrics:
        - label: Amount of USDT required to buy MOON in the first tranche
          value: 0.6
          unit-prefix: $
        - label: Amount of MOON purchased in the first tranche
          value: 0.5.2
        - label: 'Initial io-ratio (i.e. # MOON purchased per USDT spent)'
          value: 0.7
        - label: Initial effective buy price (e.g. how much you pay for 1 MOON in USDT, visible on dextools)
          value: 0.5.3
          unit-prefix: $
        - label: Starting tranche
          value: 0.2.0
      plots:

    moon-buy-simulation:
        scenario: polygon-quickswap-tranches.moon-buy.test
        plots:
          'io-ratio (i.e. # of MOON purchased per USDT spent) vs tranche':
            marks:
              - type: line
                options:
                  x: 0.0
                  y: 0.7
          Effective buy price by tranche (e.g. how much you pay for 1 MOON token in USDT e.g. visible on dextools):
            marks:
              - type: line
                options:
                  x: 0.0
                  y: 0.5.3

    moon-sell-initial-deployment:
      scenario: polygon-quickswap-tranches.moon-sell.initialized.test
      metrics:
        - label: Amount of MOON sold to meet the first tranche of USDT
          value: 0.6
          unit-prefix: $
        - label: Amount of USDT received selling the first tranche of MOON tokens
          value: 0.5.2
        - label: 'Initial io-ratio (i.e. # of USDT purchased per MOON spent)'
          value: 0.7
        - label: Initial effective sell price (Amount of MOON to sell 1 USDT e.g. visible on dextools)
          value: 0.7
          unit-prefix: $
        - label: Starting tranche
          value: 0.2.0
      plots:
                  
    moon-sell-simulation:
        scenario: polygon-quickswap-tranches.moon-sell.test
        plots:
          'io-ratio (i.e. # of TKN purchased per $ spent) vs tranche':
            marks:
              - type: line
                options:
                  x: 0.0
                  y: 0.7
          'Effective price (e.g. visible on dextools) vs tranche':
            marks:
              - type: line
                options:
                  x: 0.0
                  y: 0.7

    # ROND metrics chart
    rond-buy-initial-deployment:
      scenario: polygon-quickswap-tranches.rond-buy.initialized.test
      metrics:
        - label: Amount of USDT required to buy ROND in the first tranche
          value: 0.6
          unit-prefix: $
        - label: Amount of ROND purchased in the first tranche
          value: 0.5.2
        - label: 'Initial io-ratio (i.e. # ROND purchased per USDT spent)'
          value: 0.7
        - label: Initial effective buy price (e.g. how much you pay for 1 ROND in USDT, visible on dextools)
          value: 0.5.3
          unit-prefix: $
        - label: Starting tranche
          value: 0.2.0
      plots:

    rond-buy-simulation:
        scenario: polygon-quickswap-tranches.rond-buy.test
        plots:
          'io-ratio (i.e. # of ROND purchased per USDT spent) vs tranche':
            marks:
              - type: line
                options:
                  x: 0.0
                  y: 0.7
          Effective buy price by tranche (e.g. how much you pay for 1 ROND token in USDT e.g. visible on dextools):
            marks:
              - type: line
                options:
                  x: 0.0
                  y: 0.5.3

    rond-sell-initial-deployment:
      scenario: polygon-quickswap-tranches.rond-sell.initialized.test
      metrics:
        - label: Amount of ROND sold to meet the first tranche of USDT
          value: 0.6
          unit-prefix: $
        - label: Amount of USDT received selling the first tranche of ROND tokens
          value: 0.5.2
        - label: 'Initial io-ratio (i.e. # of USDT purchased per ROND spent)'
          value: 0.7
        - label: Initial effective sell price (Amount of ROND to sell 1 USDT e.g. visible on dextools)
          value: 0.7
          unit-prefix: $
        - label: Starting tranche
          value: 0.2.0
      plots:
                  
    rond-sell-simulation:
        scenario: polygon-quickswap-tranches.rond-sell.test
        plots:
          'io-ratio (i.e. # of TKN purchased per $ spent) vs tranche':
            marks:
              - type: line
                options:
                  x: 0.0
                  y: 0.7
          'Effective price (e.g. visible on dextools) vs tranche':
            marks:
              - type: line
                options:
                  x: 0.0
                  y: 0.7

    # SAND metrics chart
    sand-buy-initial-deployment:
      scenario: polygon-quickswap-tranches.sand-buy.initialized.test
      metrics:
        - label: Amount of USDT required to buy SAND in the first tranche
          value: 0.6
          unit-prefix: $
        - label: Amount of SAND purchased in the first tranche
          value: 0.5.2
        - label: 'Initial io-ratio (i.e. # SAND purchased per USDT spent)'
          value: 0.7
        - label: Initial effective buy price (e.g. how much you pay for 1 SAND in USDT, visible on dextools)
          value: 0.5.3
          unit-prefix: $
        - label: Starting tranche
          value: 0.2.0
      plots:

    sand-buy-simulation:
        scenario: polygon-quickswap-tranches.sand-buy.test
        plots:
          'io-ratio (i.e. # of SAND purchased per USDT spent) vs tranche':
            marks:
              - type: line
                options:
                  x: 0.0
                  y: 0.7
          Effective buy price by tranche (e.g. how much you pay for 1 SAND token in USDT e.g. visible on dextools):
            marks:
              - type: line
                options:
                  x: 0.0
                  y: 0.5.3

    sand-sell-initial-deployment:
      scenario: polygon-quickswap-tranches.sand-sell.initialized.test
      metrics:
        - label: Amount of SAND sold to meet the first tranche of USDT
          value: 0.6
          unit-prefix: $
        - label: Amount of USDT received selling the first tranche of SAND tokens
          value: 0.5.2
        - label: 'Initial io-ratio (i.e. # of USDT purchased per SAND spent)'
          value: 0.7
        - label: Initial effective sell price (Amount of SAND to sell 1 USDT e.g. visible on dextools)
          value: 0.7
          unit-prefix: $
        - label: Starting tranche
          value: 0.2.0
      plots:
                  
    sand-sell-simulation:
        scenario: polygon-quickswap-tranches.sand-sell.test
        plots:
          'io-ratio (i.e. # of TKN purchased per $ spent) vs tranche':
            marks:
              - type: line
                options:
                  x: 0.0
                  y: 0.7
          'Effective price (e.g. visible on dextools) vs tranche':
            marks:
              - type: line
                options:
                  x: 0.0
                  y: 0.7

    # IXT metrics chart
    ixt-buy-initial-deployment:
      scenario: polygon-quickswap-tranches.ixt-buy.initialized.test
      metrics:
        - label: Amount of USDT required to buy IXT in the first tranche
          value: 0.6
          unit-prefix: $
        - label: Amount of IXT purchased in the first tranche
          value: 0.5.2
        - label: 'Initial io-ratio (i.e. # IXT purchased per USDT spent)'
          value: 0.7
        - label: Initial effective buy price (e.g. how much you pay for 1 IXT in USDT, visible on dextools)
          value: 0.5.3
          unit-prefix: $
        - label: Starting tranche
          value: 0.2.0
      plots:

    ixt-buy-simulation:
        scenario: polygon-quickswap-tranches.ixt-buy.test
        plots:
          'io-ratio (i.e. # of IXT purchased per USDT spent) vs tranche':
            marks:
              - type: line
                options:
                  x: 0.0
                  y: 0.7
          Effective buy price by tranche (e.g. how much you pay for 1 IXT token in USDT e.g. visible on dextools):
            marks:
              - type: line
                options:
                  x: 0.0
                  y: 0.5.3

    ixt-sell-initial-deployment:
      scenario: polygon-quickswap-tranches.ixt-sell.initialized.test
      metrics:
        - label: Amount of IXT sold to meet the first tranche of USDT
          value: 0.6
          unit-prefix: $
        - label: Amount of USDT received selling the first tranche of IXT tokens
          value: 0.5.2
        - label: 'Initial io-ratio (i.e. # of USDT purchased per IXT spent)'
          value: 0.7
        - label: Initial effective sell price (Amount of IXT to sell 1 USDT e.g. visible on dextools)
          value: 0.7
          unit-prefix: $
        - label: Starting tranche
          value: 0.2.0
      plots:
                  
    ixt-sell-simulation:
        scenario: polygon-quickswap-tranches.ixt-sell.test
        plots:
          'io-ratio (i.e. # of TKN purchased per $ spent) vs tranche':
            marks:
              - type: line
                options:
                  x: 0.0
                  y: 0.7
          'Effective price (e.g. visible on dextools) vs tranche':
            marks:
              - type: line
                options:
                  x: 0.0
                  y: 0.7



deployments:

  # SFL-USDT tranche deployments
  polygon-sfl-buy:
    scenario: polygon-quickswap-tranches.sfl-buy.initialized.prod
    order: polygon-sfl-buy
  polygon-sfl-sell:
    scenario: polygon-quickswap-tranches.sfl-sell.initialized.prod
    order: polygon-sfl-sell

  # MOON-USDT tranche deployments
  polygon-moon-buy:
    scenario: polygon-quickswap-tranches.moon-buy.initialized.prod
    order: polygon-moon-buy
  polygon-moon-sell:
    scenario: polygon-quickswap-tranches.moon-sell.initialized.prod
    order: polygon-moon-sell

  # ROND-USDT tranche deployments
  polygon-rond-buy:
    scenario: polygon-quickswap-tranches.rond-buy.initialized.prod
    order: polygon-rond-buy
  polygon-rond-sell:
    scenario: polygon-quickswap-tranches.rond-sell.initialized.prod
    order: polygon-rond-sell

  # SAND-USDT tranche deployments
  polygon-sand-buy:
    scenario: polygon-quickswap-tranches.sand-buy.initialized.prod
    order: polygon-sand-buy
  polygon-sand-sell:
    scenario: polygon-quickswap-tranches.sand-sell.initialized.prod
    order: polygon-sand-sell
  
  # IXT-USDT tranche deployments
  polygon-ixt-buy:
    scenario: polygon-quickswap-tranches.ixt-buy.initialized.prod
    order: polygon-ixt-buy
  polygon-ixt-sell:
    scenario: polygon-quickswap-tranches.ixt-sell.initialized.prod
    order: polygon-ixt-sell
  

---
#tranche-space-per-second !The amount of tranche space that is recharged per second as a normalized 18 decimal fixed point value.
#tranche-space-recharge-delay !The duration in seconds that no recharging occurs after a trade occurs.

#tranche-size-expr !The binding to get the tranche size for the current tranche space.
#tranche-size-base !Base tranche size is the size of the smallest tranche, denominated in output token.
#tranche-size-growth !The exponential growth factor of the size of each tranche, as a decimal 18 fixed point number. E.g. 1e16 is 1% output amount growth per tranche.

#io-ratio-expr !The binding to get the IO ratio for the current tranche space.
#io-ratio-base !The base IO ratio, as a decimal 18 fixed point number. This is the IO ratio at tranche space 0 and grows according to the growth factor per tranche.
#io-ratio-growth !The exponential growth factor of the IO ratio, as a decimal 18 fixed point number. E.g. 1e16 is 1% io-ratio growth per tranche.

#reference-stable !The stable token that is used as a reference for the TWAP to offer dollar equivalent conversions.
#reference-stable-decimals !The number of decimals of the reference stable token.
#reference-reserve !The token that will be used to compare against the reference stable token to calculate the TWAP for dollar equivalent conversions.
#reference-reserve-decimals !The number of decimals of the reserve token.
#twap-duration !The duration in seconds of the TWAP window for dollar equivalence conversions.
#twap-fee !The uniswap fee tier to use for the TWAP.

#min-tranche-space-diff !The minimum tranche space difference that is allowed per trade, as a decimal 18 fixed point number. Prevents dusting the strat to stop it recharging.
#tranche-space-snap-threshold !The threshold in tranche space to snap to the nearest tranche to avoid dust issues at the edges.

#initial-tranche-space !The initial tranche space when the order is first deployed.
#get-last-tranche !The binding to get the last tranche space and update time.
#set-last-tranche !The binding to set the last tranche space and update time.

#test-tranche-space-before !Returned by get-test-last-tranche to allow the tranche space before to be bound for testing.
#test-last-update-time !Returned by get-test-last-tranche to allow the last update time to be bound for testing.
#test-now !Returned by get-test-last-tranche to allow the current time to be bound for testing.

#io-ratio-multiplier !The binding to get the IO ratio multiplier.

#amount-is-output !Whether the amount is an output or input amount. Non-zero means output (i.e. normal orderbook behaviour), zero means input.

#init-key "init"
#tranche-space-key "tranche-space"
#update-time-key "update-time"

#plottables !The binding for additional things we want to plot during testing.

#uniswap-words !The subparser for the Uniswap words
#orderbook-subparser !The subparser for the Orderbook

#plottables-test
  amount
  io-ratio:,
  input-amount: decimal18-mul(amount io-ratio),
  effective-price: decimal18-inv(io-ratio);

#plottables-prod
  amount
  io-ratio:;

#get-last-tranche-prod
  is-initialized: get(hash(order-hash() init-key)),
  tranche-space-before: if(
    is-initialized
    get(hash(order-hash() tranche-space-key))
    initial-tranche-space
  ),
  last-update-time: if(
    is-initialized
    get(hash(order-hash() update-time-key))
    block-timestamp()
  ),
  now: block-timestamp();

#tranche-space-shyness !The shyness of the liquidity in tranches, as a decimal 18 fixed point number. E.g. 9e17 is 90% shy.
#set-last-tranche-prod
  tranche-space now:,
  shy-tranche-space: if(
    is-zero(decimal18-frac(tranche-space))
    decimal18-add(tranche-space tranche-space-shyness)
    tranche-space),
  :set(hash(order-hash() init-key) 1),
  :set(hash(order-hash() tranche-space-key) shy-tranche-space),
  :set(hash(order-hash() update-time-key) now);

/* Forward the bindings through as is to the caller. */
#max-test-tranche-space !The maximum tranche space that will appear on the test chart.
#get-last-tranche-test
  tranche-space-before: int-mod(test-tranche-space-before max-test-tranche-space),
  last-update-time: test-last-update-time,
  now: test-now;
#get-last-tranche-test-init
  tranche-space-before: initial-tranche-space,
  last-update-time: test-last-update-time,
  now: test-now;
/* There's nothing to set if we're just rebinding in tests. */
#set-last-tranche-test
  tranche-space now:;

#exponential-growth
  base rate t:,
  _: decimal18-exponential-growth(base rate t);

#linear-growth
  base rate t:,
  _: decimal18-linear-growth(base rate t);

#constant-growth
  base _ _:,
  _: base;

#calculate-tranche
  tranche-space-before
  last-update-time
  now: call<'get-last-tranche>(),
  recharge-duration: int-saturating-sub(now int-add(last-update-time tranche-space-recharge-delay)),
  recharged-tranche-space: decimal18-mul(int-to-decimal18(recharge-duration) tranche-space-per-second),
  /* repeat now for easy access by callers */
  _: now,
  tranche-space-now: decimal18-saturating-sub(tranche-space-before recharged-tranche-space),
  tranche-space-available: decimal18-headroom(tranche-space-now),
  tranche-total-size: call<'tranche-size-expr>(tranche-size-base tranche-size-growth decimal18-floor(tranche-space-now));

#io-ratio-multiplier-sell
  multiplier: uniswap-v3-twap-output-ratio(reference-stable reference-stable-decimals reference-reserve reference-reserve-decimals twap-duration 0 twap-fee);

#io-ratio-multiplier-buy
  multiplier: uniswap-v3-twap-output-ratio(reference-reserve reference-reserve-decimals reference-stable reference-stable-decimals twap-duration 0 twap-fee);

#io-ratio-multiplier-identity
  multiplier: 1e18;

#calculate-io
  using-words-from uniswap-words orderbook-subparser
  tranche-space-now
  tranche-space-available
  tranche-total-size: call<'calculate-tranche>(),
  tranche-io-ratio: call<'io-ratio-expr>(io-ratio-base io-ratio-growth decimal18-floor(tranche-space-now)),
  final-io-ratio: decimal18-mul(tranche-io-ratio call<'io-ratio-multiplier>()),
  amount-available: decimal18-mul(tranche-total-size tranche-space-available),
  amount: if(amount-is-output amount-available decimal18-div(amount-available final-io-ratio)),
  io-ratio: final-io-ratio,
  :call<'plottables>(amount io-ratio);

#handle-io
  now
  tranche-space-before
  _
  tranche-total-size: call<'calculate-tranche>(),
  tranche-amount-diff: if(
    amount-is-output
    decimal18-scale-18-dynamic(output-token-decimals() output-vault-balance-decrease())
    decimal18-scale-18-dynamic(input-token-decimals() input-vault-balance-increase())),
  tranche-space-diff: decimal18-div(tranche-amount-diff tranche-total-size),
  tranche-space-after: decimal18-add(tranche-space-before tranche-space-diff),
  /* Snap tranche space to the nearest tranche to avoid dust issues at the edges */
  tranche-space-after-snapped: decimal18-snap-to-unit(tranche-space-snap-threshold tranche-space-after),
  :ensure(
    greater-than-or-equal-to(tranche-space-after-snapped decimal18-add(tranche-space-before min-tranche-space-diff))
    "Minimum trade size not met."
  ),
  :call<'set-last-tranche>(tranche-space-after-snapped now);