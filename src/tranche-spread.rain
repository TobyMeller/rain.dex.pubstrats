---
#distribution-token !The token that is being distributed by the strat.
#reserve-token !The token used to buyback the distribution token.

#get-tranche-space !Binding to fetch the current tranche space.
#set-tranche-space !Binding to set the current tranche space.
#test-tranche-space !Normalized current position in tranche space.
#tranche-space-key "tranche-space"

#get-real-tranche-space
  _: get(hash(order-hash() tranche-space-key));

#set-real-tranche-space
  tranche-space:,
  :set(hash(order-hash() tranche-space-key) tranche-space);

#get-test-tranche-space
  _: test-tranche-space;

#set-test-tranche-space
  tranche-space:;

#tranche-reserve-amount-growth !Binding to calculate the reserve amount of the current tranche.
#tranche-reserve-amount-base !Base tranche size in reserve token.
#tranche-reserve-amount-growth-constant
  _:,
  _: tranche-reserve-amount-base;

#tranche-reserve-io-ratio-growth !Binding to calculate the io ratio of the current tranche.
#tranche-reserve-io-ratio-base !Base tranche io ratio.
#tranche-reserve-io-ratio-linear
  tranche-space:,
  _: decimal18-mul(tranche-reserve-io-ratio-base decimal18-add(1 decimal18-floor(tranche-space)));

#calculate-tranche-reserve
  tranche-space: call<get-tranche-space>(),
  tranche-reserve-amount-total: call<tranche-reserve-amount-growth>(tranche-space),
  tranche-reserve-amount-available: decimal18-mul(decimal18-headroom(tranche-space) tranche-reserve-amount-total),
  tranche-reserve-io-ratio: call<tranche-reserve-io-ratio-growth>(tranche-space);

#spread-ratio !The ratio of the spread. 101e16 is 1% difference between distribution and buyback.
#calculate-spread
  reserve-amount
  reserve-io-ratio:,
  is-distribution: equal-to(output-token-address() distribution-token),
  spread-io-ratio: if(is-distribution decimal18-div<1>(spread-ratio reserve-io-ratio) reserve-io-ratio),
  spread-amount: if(is-distribution decimal18-div<1>(reserve-amount spread-io-ratio) reserve-amount);

#calculate-io
  tranche-reserve-amount-available
  tranche-reserve-io-ratio: call<'calculate-tranche-reserve>(),
  output-amount
  io-ratio: call<'calculate-spread>(tranche-reserve-amount-available tranche-reserve-io-ratio);

#tranche-space-edge-guard-threshold !The tranche space after cannot be this close to an upper or lower tranche edge.
#handle-io
  tranche-space-before
  tranche-reserve-amount-total
  _
  tranche-reserve-io-ratio: call<'calculate-tranche-reserve'>(),
  is-distribution: equal-to(output-token-address() distribution-token),
  reserve-amount-diff: if(
    is-distribution
    decimal18-scale18-dynamic(input-token-decimals() input-vault-balance-increase())
    decimal18-scale18-dynamic(output-token-decimals() output-vault-balance-increase())),
  tranche-space-diff: decimal18-div(reserve-amount-diff tranche-reserve-amount-total),
  tranche-space-after: if(
    is-distribution
    decimal18-add(tranche-space-before tranche-space-diff)
    decimal18-saturating-sub(tranche-space-before tranche-space-diff)
  ),
  :ensure(
    every(
      greater-than-or-equal-to(decimal18-frac(tranche-space-after) tranche-space-edge-guard-threshold)
      greater-than-or-equal-to(decimal18-headroom(tranche-space-after) tranche-space-edge-guard-threshold)
    )
  ),
  :call<set-tranche-space>(tranche-space-after-snapped);